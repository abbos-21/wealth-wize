---
interface Props {
  title: string;
  style?: string;
}

const { title, style } = Astro.props;
---

<main style={style}>
  <div class="container">
    <div class="row" data-aos="zoom-in">
      <h1 class="title text-center">{title}</h1>
    </div>

    <div class="row mt-5 justify-content-between" data-aos="fade-left">
      <form class="col-lg-5 col-12" id="myForm">
        <div class="mb-5 position-relative">
          <input type="text" required id="name" />
          <span class="highlight"></span>
          <span class="bar"></span>
          <label>–ò–º—è <span class="req-red">*</span></label>
        </div>
        <div class="mb-5 position-relative">
          <input type="email" required id="email" />
          <span class="highlight"></span>
          <span class="bar"></span>
          <label>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ <span class="req-red">*</span></label>
        </div>

        <div class="mb-5 position-relative">
          <input type="tel" required id="tel" />
          <span class="highlight"></span>
          <span class="bar"></span>
          <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <span class="req-red">*</span></label>
        </div>
        <div class="mb-5 position-relative">
          <input type="text" required id="message" />
          <span class="highlight"></span>
          <span class="bar"></span>
          <label>–°–æ–æ–±—â–µ–Ω–∏–µ <span class="req-red">*</span></label>
        </div>

        <button type="submit" class="btn button-filled" data-aos="fade-right"
          >–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button
        >
      </form>

      <div class="col-lg-6 col-12 mt-lg-0 mt-5">
        <!-- <img
          src="/landing-dark.jpg"
          alt="Contact"
          class="w-100"
          style="border-radius: 20px;"
        /> -->

        <iframe
          src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d726.8869798325231!2d69.26941239974929!3d41.30400844714736!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x38ae8b4f696718a3%3A0x8e06b08e61fa3def!2sWealthwise!5e0!3m2!1sru!2s!4v1731322641709!5m2!1sru!2s"
          width="100%"
          height="450"
          style="border:0; border-radius: 20px;"
          allowfullscreen=""
          loading="lazy"
          referrerpolicy="no-referrer-when-downgrade"></iframe>
      </div>
    </div>
  </div>
</main>

<script lang="js">
  document
    .getElementById("myForm")
    .addEventListener("submit", async function (e) {
      e.preventDefault();

      const name = document.getElementById("name").value;
      const email = document.getElementById("email").value;
      const tel = document.getElementById("tel").value;
      const message = document.getElementById("message").value;
      const chatIds = ["1031081189", "6126626263", "5751827734", "1372474769"];

      const htmlFormatMessage = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ üîî \n\n<b>–ò–º—è: </b>${name}\n<b>–ü–æ—á—Ç–∞: </b>${email}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: </b>${tel}\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ: </b>\n\n<i>${message}</i>`;

      console.log(htmlFormatMessage);

      try {
        const requests = chatIds.map((chatId) =>
          fetch(
            "https://api.telegram.org/bot7820076195:AAE7TTsq15V6Olcobhrrourpmu9zreetjb0/sendMessage",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                chat_id: chatId,
                text: htmlFormatMessage,
                parse_mode: "HTML",
              }),
            },
          ),
        );

        await Promise.all(requests);

        alert("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
      } catch (error) {
        console.error("Error:", error);
        alert("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π");
      }
    });
</script>

<style>
  .req-red {
    color: red;
  }

  .title {
    font-size: 42px;
    line-height: 48px;
    font-weight: 600;
    color: var(--text-dark-color);
  }

  .row.mt-5 {
    background: white;
    padding: 100px;
    border-radius: 3rem;
    border: 1px solid var(--primary-color);
  }

  .button-filled {
    padding: 0 31px;
    font-size: 17px;
    line-height: 64px;
    font-weight: 500;
    color: var(--text-light-color);
    background: var(--gradient-color);
    border: none;
    border-radius: 9999px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }

  @media only screen and (max-width: 767px) {
    .row.mt-5 {
      padding: 50px;
    }
  }

  @media only screen and (max-width: 575px) {
    .row.mt-5 {
      padding: 25px;
      border-radius: 0;
    }
  }

  input {
    font-size: 18px;
    padding: 10px 10px 10px 5px;
    display: block;
    width: 100%;
    border: none;
    border-bottom: 1px solid var(--primary-color);
    background-color: transparent;
    color: var(--text-dark-color);
  }

  input:focus {
    outline: none;
  }

  label {
    color: var(--text-dark-color);
    font-size: 18px;
    font-weight: normal;
    position: absolute;
    pointer-events: none;
    left: 5px;
    top: 10px;
    transition: 0.2s ease all;
    -moz-transition: 0.2s ease all;
    -webkit-transition: 0.2s ease all;
  }

  input:focus ~ label,
  input:valid ~ label {
    top: -20px;
    font-size: 14px;
    color: var(--text-dark-color);
  }

  .bar {
    position: relative;
    display: block;
    width: 100%;
  }
  .bar:before,
  .bar:after {
    content: "";
    height: 2px;
    width: 0;
    bottom: 1px;
    position: absolute;
    background: var(--primary-color);
    transition: 0.2s ease all;
    -moz-transition: 0.2s ease all;
    -webkit-transition: 0.2s ease all;
  }
  .bar:before {
    left: 50%;
  }
  .bar:after {
    right: 50%;
  }

  input:focus ~ .bar:before,
  input:focus ~ .bar:after {
    width: 50%;
  }

  .highlight {
    position: absolute;
    height: 60%;
    width: 100px;
    top: 25%;
    left: 0;
    pointer-events: none;
    opacity: 0.5;
  }

  input:focus ~ .highlight {
    -webkit-animation: inputHighlighter 0.3s ease;
    -moz-animation: inputHighlighter 0.3s ease;
    animation: inputHighlighter 0.3s ease;
  }

  @-webkit-keyframes inputHighlighter {
    from {
      background: var(--primary-color);
    }
    to {
      width: 0;
      background: transparent;
    }
  }
  @-moz-keyframes inputHighlighter {
    from {
      background: var(--primary-color);
    }
    to {
      width: 0;
      background: transparent;
    }
  }
  @keyframes inputHighlighter {
    from {
      background: var(--primary-color);
    }
    to {
      width: 0;
      background: transparent;
    }
  }
</style>

---
interface Props {
  label: string;
  type?: "submit" | "button" | "reset" | null | undefined;
  variant?: string;
}

const { label, type = "button", variant = "primary" } = Astro.props;

const classMap: { [key: string]: string } = {
  primary: "btn button",
  outline: "btn button-outline",
  filled: "btn button-filled",
};

const buttonClass =
  classMap[variant as keyof typeof classMap] || classMap.primary;
---

<button type={type} class={buttonClass}>
  {label}
</button>

<style>
  .button {
    padding: 0 31px;
    font-size: 17px;
    line-height: 64px;
    font-weight: 500;
    color: var(--text-color);
    background-color: var(--background-color);
    border-radius: 9999px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }

  .button:hover {
    background-color: var(--primary-color);
    color: var(--background-color);
  }

  .button-outline {
    padding: 0 31px;
    font-size: 17px;
    line-height: 64px;
    font-weight: 500;
    color: var(--background-color);
    background-color: transparent;
    border: 1px solid var(--primary-color);
    border-radius: 9999px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }

  .button-outline:hover {
    background-color: var(--primary-color);
    color: var(--background-color);
  }

  .button-filled {
    padding: 0 31px;
    font-size: 17px;
    line-height: 64px;
    font-weight: 500;
    color: var(--background-color);
    background-color: var(--primary-color);
    border-radius: 9999px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }
</style>
